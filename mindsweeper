import tkinter as tk
import random

# Constants
WIDTH = 5
HEIGHT = 4
MINES = 4

class Minesweeper:
    def __init__(self, master):
        self.master = master
        self.master.title("Minesweeper")
        self.buttons = [[None for _ in range(WIDTH)] for _ in range(HEIGHT)]
        self.is_clicked = [[False for _ in range(WIDTH)] for _ in range(HEIGHT)]
        self.is_mine = [[False for _ in range(WIDTH)] for _ in range(HEIGHT)]
        self.game_over = False
        self.create_grid()
        self.place_mines()

    def create_grid(self):
        for row in range(HEIGHT):
            for col in range(WIDTH):
                button = tk.Button(self.master, text="", width=2, height=1,
                                   command=lambda row=row, col=col: self.click(row, col))
                button.grid(row=row, column=col)
                self.buttons[row][col] = button

    def place_mines(self):
        mines_placed = 0
        while mines_placed < MINES:
            row = random.randint(0, HEIGHT - 1)
            col = random.randint(0, WIDTH - 1)
            if not self.is_mine[row][col]:
                self.is_mine[row][col] = True
                mines_placed += 1

    def click(self, row, col):
        if self.is_mine[row][col]:
            self.buttons[row][col].config(text="*", bg="red")
            self.game_over = True
            self.reveal_mines()
            tk.messagebox.showinfo("Game Over", "You clicked on a mine! Game Over!")
        else:
            self.reveal(row, col)
            if self.check_win():
                tk.messagebox.showinfo("Congratulations!", "You win!")

    def reveal(self, row, col):
        if 0 <= row < HEIGHT and 0 <= col < WIDTH and not self.is_clicked[row][col]:
            mines_count = self.count_adjacent_mines(row, col)
            self.is_clicked[row][col] = True
            if mines_count > 0:
                self.buttons[row][col].config(text=str(mines_count))
            else:
                self.buttons[row][col].config(text="")
                for dr in [-1, 0, 1]:
                    for dc in [-1, 0, 1]:
                        self.reveal(row + dr, col + dc)

    def count_adjacent_mines(self, row, col):
        count = 0
        for dr in [-1, 0, 1]:
            for dc in [-1, 0, 1]:
                if 0 <= row + dr < HEIGHT and 0 <= col + dc < WIDTH:
                    if self.is_mine[row + dr][col + dc]:
                        count += 1
        return count

    def reveal_mines(self):
        for row in range(HEIGHT):
            for col in range(WIDTH):
                if self.is_mine[row][col]:
                    self.buttons[row][col].config(text="*", bg="red")

    def check_win(self):
        for row in range(HEIGHT):
            for col in range(WIDTH):
                if not self.is_clicked[row][col] and not self.is_mine[row][col]:
                    return False
        return True

root = tk.Tk()
minesweeper = Minesweeper(root)
root.mainloop()
